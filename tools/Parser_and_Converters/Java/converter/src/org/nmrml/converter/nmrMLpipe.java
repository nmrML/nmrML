/*
 * $Id: Converter.java,v 1.0.alpha Feb 2014 (C) INRA - DJ $
 *
 * CC-BY 4.0
 */

package org.nmrml.converter;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.MissingArgumentException;
import org.apache.commons.cli.MissingOptionException;
import org.apache.commons.cli.OptionBuilder;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PosixParser;

import java.util.*;
import java.lang.*;

import org.nmrml.converter.*;

// create a nmrML file based on a java object tree generated by the JAXB XJC Tool (JDK 7 and above).
public class nmrMLpipe {

    private static final String Version = "1.1b";

    private enum Task_Type { create, proc, peaks, atoms; }

    public static void usage(Options options) {
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp( "nmrMLpipe" , options );
        System.exit(1);
    }
    public static void version() {
        System.out.println("nmrML Pipe version = " + Version);
        System.exit(1);
    }

    public static void main( String[] args ) {

        Options options = new Options();
        options.addOption("h", "help", false, "prints the help content");
        options.addOption("v", "version", false, "prints the version");
        options.addOption(OptionBuilder
           .withArgName("create|proc|peaks|atoms")
           .hasArg()
           .isRequired()
           .withDescription("what to lanch: create, proc")
           .withLongOpt("launch")
           .create("l"));

        try {

           if ( args.length==0 ) {
               System.err.println("nmrMLpipe: Error while parsing the command line");
               usage(options);
               System.exit(1);
           }
           if (args[0].equals("-h") ) usage(options);
           if (args[0].equals("-v") ) version();
           if ( ! args[0].equals("-l") ) {
               System.err.println("nmrMLpipe: Error while parsing the command line: "+args[0]);
               usage(options);
               System.exit(1);
           }
           if ( args.length==1 ) {
               System.err.println("nmrMLpipe: Error while parsing the command line");
               usage(options);
               System.exit(1);
           }
 
           String whatLaunch = args[1];
           int j=0;
           String[] new_args = new String[args.length - 2];
           for (int i = 0; i < args.length; i++) {
                 if (args[i].equals("-l")) { i++; continue; }
                 new_args[j] = args[i];
                 j++;
           }

           switch (Task_Type.valueOf(whatLaunch)) {
              case create:
                   nmrMLcreate taskCreate = new nmrMLcreate();
                   taskCreate.launch(new_args);
                   break;
              case proc:
                   nmrMLproc taskProc = new nmrMLproc();
                   taskProc.launch(new_args);
                   break;
              case peaks: //TODO
System.err.println("TODO: nmrML Peak List Sections");
                   break;
              case atoms: //TODO
System.err.println("TODO: nmrML Atoms Sections");
                   break;
           }

        } catch(IllegalArgumentException e) {
            System.out.println("nmrMLpipe: Just caught an IllegalArgumentException..." + e.getMessage());
            usage(options);
        } catch( Exception e ) {
            e.printStackTrace();
        }

    }
}
